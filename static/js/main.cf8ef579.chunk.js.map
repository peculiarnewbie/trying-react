{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SeachBar.styles.js","components/SearchBar/index.js","API.js","images/no_image.jpg","components/Home.js","configIGDB.js","components/Button/Button.styles.js","components/Button/index.js","APIIGDB.js","hooks/useHomeGameFetch.js","components/HomeGame.js","components/Game.js","hooks/useGameFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","SiteLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","image","isSearch","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","gameId","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","defaultConfig","method","headers","searchTerm","page","a","endpoint","fetch","json","movieId","creditsEndpoint","reqToken","request_token","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rating","Home","IMAGE_BASE_URL","Button","callback","onClick","myHeaders","Headers","append","requestOptions","redirect","apiSettings","fetchGames","raw","fetchFirstGame","initialState","results","firstGame","firstGameId","firstGameName","firstGameSummary","heroImage","total_pages","total_results","HomeGame","loading","setLoading","error","setError","API","games","id","game","prev","useHomeGameFetch","console","log","artworks","image_id","screenshots","NoImage","name","summary","map","cover","Game","setStatee","fetchGame","useGameFetch","useParams","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf8ef579.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    position: -webkit-sticky; /* Safari */\r\n    position: sticky;\r\n    top: 0;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n    z-index:200;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width: var(--maxWidth);\r\n    padding: 20px 0;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n    width: 200px;\r\n\r\n    @media screen and (max-width: 500px){\r\n        width: 150px\r\n    }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n    width: 100px;\r\n\r\n    @media screen and (max-width: 500px){\r\n        width: 80px\r\n    }\r\n`;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport SiteLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\r\n\r\nfunction Header(){\r\n    return(\r\n        <Wrapper>\r\n            <Content>\r\n                <Link to='/'>\r\n                    <LogoImg src={SiteLogo} alt='site-logo' />\r\n                </Link>\r\n                <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\r\n            </Content>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default Header;","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    background: linear-gradient(\r\n        to bottom, \r\n        rgba(0, 0, 0, 0) 41%, \r\n        rgba(0, 0, 0, 0.65) 100%\r\n    ),\r\n        url(${({ image }) => image}), var(--darkGrey);\r\n    background-size: 100%, cover;\r\n    background-position: center;\r\n    height: 600px;\r\n    position: relative;\r\n    animation: animateHeroImage 1s;\r\n\r\n    @keyframes animateHeroImage {\r\n        from {\r\n            opacity: 0;\r\n        }\r\n        to{\r\n            opacity: 1;\r\n        }\r\n    }\r\n\r\n    ${({ isSearch }) => isSearch && `\r\n    height: 300px\r\n  `}\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    padding: 20px;\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    z-index: 100;\r\n    max-width: 700px;\r\n    position: absolute;\r\n    bottom: 40px;\r\n    margin-right: 20px;\r\n    min-height: 100px;\r\n    color: var(--white);\r\n\r\n    h1{\r\n        font-size: var(--fontVeryBig);\r\n\r\n        @media screen and (max-width: 720px){\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n\r\n    p {\r\n        font-size: var(--fontMed);\r\n\r\n        @media screen and (max-width: 720px){\r\n            font-size: var(--fontSmall);\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 720px){\r\n        max-width: 100%;\r\n    }\r\n`;","import React from 'react';\r\n//styles\r\nimport { Wrapper, Content, Text  } from './HeroImage.styles';\r\n\r\nconst HeroImage = ({isSearch, image, title, text}) =>(\r\n    <Wrapper image={image} isSearch={isSearch}>\r\n        <Content>\r\n            <Text>\r\n                <h1>{title}</h1>\r\n                <p>{text}</p>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default HeroImage;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n    padding: 0 20px;\r\n\r\n    h1 {\r\n        color: var(--medGrey);\r\n\r\n        @media screen and (max-width: 768px) {\r\n            font-size: car(--fontBig);\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n    grid-row-gap: 0.1rem;\r\n    grid-column-gap: 1.5rem;\r\n    align-items: flex-start;\r\n`;","import React from 'react';\r\n//Styles\r\nimport { Wrapper, Content } from './Grid.styles';\r\n\r\nconst Grid = ({ header, children }) => (\r\n    <Wrapper>\r\n        <h1>{header}</h1>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Grid;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    //background: var(--darkGrey);    \r\n    padding: 10px 0px;\r\n    overflow: hidden;\r\n    max-height: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    //background: var(--medGrey); \r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0 10px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n    max-width: 720px;\r\n    transition: all 0.3s;\r\n    border-radius: 5px;\r\n    object-fit: cover;\r\n    animation: animateThumb 0.5s;\r\n    width:100%;\r\n    margin:auto;\r\n\r\n    :hover {\r\n        width: 105%;\r\n        opacity:  0.8;\r\n    }\r\n\r\n    @keyframes animateThumb{\r\n        from{\r\n            opacity:  0;\r\n        }\r\n        to{\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    position:relative;\r\n    top:0px;\r\n    color: var(--black);\r\n    margin: 0 10px;\r\n`;\r\n\r\nexport const Gap = styled.div`\r\n    height:10px;\r\n`;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n// Styles\r\nimport { Wrapper, Content, Image, Text, Gap } from './Thumb.styles';\r\n\r\nconst Thumb = ({ image, title, gameId, clickable }) => (\r\n    <Wrapper>\r\n        {clickable ? (\r\n            <Link to={`/${gameId}`}>\r\n                <Content>\r\n                    <Image src={image} alt='movie-thumb' />\r\n                </Content>\r\n                <Text>{title}</Text>\r\n            </Link>\r\n        ) : (\r\n            <Content>\r\n            <Image src={image} alt='movie-thumb' />\r\n            </Content>\r\n        )\r\n        }\r\n    </Wrapper>\r\n)\r\n\r\nexport default Thumb;","import { Spinner } from './Spinner.styles'\r\n\r\nexport default Spinner;","import styled from 'styled-components';\r\n\r\nexport const Spinner = styled.div`\r\n    border: 5px solid var(--lightGrey);\r\n    border-top: 5px solid var(--medGrey);\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    animation: spin 0.8s linear infinite;\r\n    margin: 20px auto;\r\n\r\n    @keyframes spin{\r\n        0% {\r\n            transform: rotate(0deg);\r\n        }\r\n        100% {\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n\r\n`;","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    position: relative;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    height: 55px;\r\n    background: var(--medGrey);\r\n    margin: 0 auto;\r\n    border-radius: 40px;\r\n    color: var(--white);\r\n\r\n    img {\r\n        position: absolute;\r\n        left: 15px;\r\n        top: 14px;\r\n        width: 30px;\r\n    }\r\n\r\n    input {\r\n        font-size: 28px;\r\n        position: absolute;\r\n        left: 0;\r\n        margin: 8px 0;\r\n        padding: 0 0 0 60px;\r\n        border: 0;\r\n        width: 95%;\r\n        background: transparent;\r\n        height: 40px;\r\n        color: var(--white);\r\n\r\n        :focus{\r\n            outline: none;\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect, useRef } from 'react';\r\n// Image\r\nimport searchIcon from '../../images/search-icon.svg';\r\n// Styles\r\nimport { Wrapper, Content } from './SeachBar.styles';\r\n\r\nconst SearchBar = ({setSearchTerm}) => {\r\n    const [state, setState] = useState('');\r\n    const initial = useRef(true);\r\n\r\n    useEffect(() =>{\r\n        if(initial.current){\r\n            initial.current = false;\r\n            return;\r\n        }\r\n\r\n        const timer = setTimeout(() => {\r\n            setSearchTerm(state);\r\n        }, 500)\r\n\r\n        return () => clearTimeout(timer)\r\n    }, [setSearchTerm, state])\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Content>\r\n                <img src={searchIcon} alt='search-icon' />\r\n                <input\r\n                    type='text'\r\n                    placeholder='Search Movie'\r\n                    onChange={event => setState(event.currentTarget.value)} //inline function, can't be separated if you want\r\n                    value = {state}\r\n                />\r\n            </Content>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from 'react';\r\n//config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config';\r\n//Components\r\nimport HeroImage from './HeroImage';\r\nimport Grid from './Grid';\r\nimport Thumb from './Thumb';\r\nimport Spinner from './Spinner';\r\nimport SearchBar from './SearchBar';\r\n\r\n//Hook\r\nimport { useHomeFetch } from '../hooks/useHomeFetch';\r\n//Image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nfunction Home(){\r\n    const { state, loading, error } = useHomeFetch();\r\n\r\n    return(\r\n        <>\r\n            {state.results[0] ? (\r\n                <HeroImage \r\n                    image = {`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                    title={state.results[0].original_title}\r\n                    text={state.results[0].overview}\r\n                />\r\n            ) : null\r\n            }\r\n            <SearchBar />\r\n            <Grid header='Popular Movies'>\r\n                {state.results.map(movie => (\r\n                    <Thumb\r\n                        key={movie.id}\r\n                        clickable\r\n                        image={\r\n                            movie.poster_path\r\n                                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                                : NoImage\r\n                        }\r\n                        movieId={movie.id}\r\n                        title={movie.original_title}\r\n                    />\r\n                ))}\r\n\r\n            </Grid>\r\n            <Spinner />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = \"https://fierce-ocean-46816.herokuapp.com/https://api.igdb.com/v4/games/\";\nconst CLIENT_ID = process.env.REACT_APP_IGDB_CLIENT_ID;\nconst ACCESS_TOKEN = process.env.REACT_APP_IGDB_ACCESS_TOKEN;\n\nconst IMAGE_BASE_URL = 'https://images.igdb.com/igdb/image/upload/t_720p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  API_URL,\n  CLIENT_ID,\n  ACCESS_TOKEN,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n};\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n\r\n`;","import React from 'react';\r\n// Styles\r\nimport { Wrapper } from './Button.styles'\r\n\r\nconst Button = ({ text, callback }) => (\r\n    <Wrapper type='button' onClick={callback}>\r\n        {text}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Button;","import {\n  API_URL,\n} from './configIGDB';\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Client-ID\", \"x0muvk9gdif8w2reu3bkf5y0k1xrsu\");\nmyHeaders.append(\"Authorization\", \"Bearer s7qvf5pffac1nsuy9tioqc4ef5u224\");\nmyHeaders.append(\"Content-Type\", \"text/plain\");\n\nvar raw = \"fields name, cover.image_id; sort rating desc\";\n\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: raw,\n  redirect: 'follow'\n};\n\nconst apiSettings = {\n  fetchGames: async(searchTerm) => {\n    const raw = searchTerm\n    ? `search \"${searchTerm}\"; fields name, cover.image_id; where category = 0 & rating_count > 5; limit 200;`\n    : `fields name, cover.image_id; sort aggregated_rating desc; where first_release_date > 1609434000 & rating_count > 1 & aggregated_rating_count > 2; limit 200;`\n    requestOptions.body = raw\n    return await (await fetch(API_URL, requestOptions)).json();\n  },\n\n  fetchFirstGame: async(gameId) => {\n    const raw = `fields name, summary, cover.image_id, artworks.image_id, screenshots.image_id; where id = ${gameId};`\n    requestOptions.body = raw\n    return await (await fetch(API_URL, requestOptions)).json();\n\n  }\n};\n\nexport default apiSettings;\n","import { any } from 'prop-types';\r\nimport { useState , useEffect, useRef } from 'react';\r\nimport { isCompositeComponent } from 'react-dom/test-utils';\r\n// API\r\nimport API from '../APIIGDB';\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    firstGame: [],\r\n    firstGameId: 0,\r\n    firstGameName: \"\",\r\n    firstGameSummary: \"\",\r\n    heroImage: \"\",\r\n    total_pages: 0,\r\n    total_results: 0\r\n};\r\n\r\nexport const useHomeGameFetch = () => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [state, setState] = useState(initialState);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const fetchGames = async (page, searchTerm = \"\") => {\r\n        try{\r\n            setError(false);\r\n            setLoading(true);\r\n\r\n            const games = await API.fetchGames(searchTerm);\r\n\r\n            const game = await API.fetchFirstGame(games[0].id);\r\n\r\n            setState(prev => ({\r\n                ...games, \r\n                results:\r\n                    page > 1 ? [...prev.results, ...games] : [...games],\r\n                firstGame: [...game]\r\n            }));\r\n\r\n        } catch (error) {\r\n            setError(true);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    // Initial and search\r\n    useEffect(() => {\r\n        setState(initialState);\r\n        fetchGames(1, searchTerm);\r\n    }, [searchTerm]);\r\n\r\n    return { state, loading, error, searchTerm, setSearchTerm };\r\n};","import React from 'react';\r\n//config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../configIGDB';\r\n//Components\r\nimport HeroImage from './HeroImage';\r\nimport Grid from './Grid';\r\nimport Thumb from './Thumb';\r\nimport Spinner from './Spinner';\r\nimport SearchBar from './SearchBar';\r\nimport Button from './Button';\r\n\r\n//Hook\r\nimport { useHomeGameFetch } from '../hooks/useHomeGameFetch';\r\n//Image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nfunction HomeGame(){\r\n    const { state, loading, error, searchTerm, setSearchTerm } = useHomeGameFetch();\r\n\r\n    console.log(state);\r\n\r\n    return(\r\n        <>\r\n            {state.firstGame[0] ? (\r\n                <HeroImage \r\n                    isSearch = {searchTerm ? true : false}\r\n                    image={ state.firstGame[0].artworks\r\n                            ? IMAGE_BASE_URL + state.firstGame[0].artworks[0].image_id + \".jpg\"\r\n                            : state.firstGame[0].screenshots\r\n                                ? IMAGE_BASE_URL + state.firstGame[0].screenshots[0].image_id + \".jpg\"\r\n                                : NoImage\r\n                    }\r\n                    title={state.firstGame[0].name}\r\n                    text={state.firstGame[0].summary}\r\n                />\r\n            ) : null\r\n            }\r\n            <SearchBar setSearchTerm={setSearchTerm} />\r\n            <Grid header={searchTerm ? 'Search Result' : 'Highest Rated 2021 Games'}>\r\n                {state.results.map(game => (\r\n                    <Thumb\r\n                        key={game.id}\r\n                        clickable\r\n                        image={\r\n                            game.cover\r\n                                ? IMAGE_BASE_URL  + game.cover.image_id + \".jpg\"\r\n                                : NoImage\r\n                        }\r\n                        gameId={game.id}\r\n                        title={game.name}\r\n                    />\r\n                ))}\r\n\r\n            </Grid>\r\n            {loading && <Spinner />}\r\n            {state.page < state.total_pages && !loading && (\r\n                <Button text='Load More' />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomeGame;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// Config\r\nimport { IMAGE_BASE_URL } from '../configIGDB';\r\n// Components\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\n// Hook\r\nimport { useGameFetch } from '../hooks/useGameFetch';\r\n// image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nconst Game = () => {\r\n    const { gameId } = useParams();\r\n\r\n    const { state: game, loading, error} = useGameFetch(gameId);\r\n\r\n    console.log(game);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                Game\r\n            </div>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default Game;","import { useState, useEffect } from 'react';\r\nimport API from '../APIIGDB';\r\n\r\nexport const useGameFetch = gameId => {\r\n    const [state, setStatee] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchGame = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError(false);\r\n\r\n                const game = await API.fetchFirstGame(gameId);\r\n\r\n                setStatee({\r\n                    ...game\r\n                })\r\n\r\n                setLoading(false);\r\n\r\n            } catch (error) {\r\n                setError(true);\r\n            }\r\n        };\r\n\r\n        fetchGame();\r\n    }, [gameId]);\r\n\r\n    return { state, loading, error };\r\n};\r\n","import React from 'react';\r\n\r\nconst NotFound = () => <div>NotFound</div>;\r\n\r\nexport default NotFound;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n :root { \r\n     --maxWidth: 1280px;\r\n     --white: #fff;\r\n     --black: #000;\r\n     --lightGrey: #eee;\r\n     --medGrey: #353535;\r\n     --darkGrey: #1c1c1c;\r\n     --fontVeryBig: 2.5rem;\r\n     --fontBig: 1.5rem;\r\n     --fontMed: 1.2rem;\r\n     --fontSmall: 1rem;\r\n }\r\n\r\n *{\r\n     box-sizing: border-box;\r\n     font-family: 'Abel', sans-serif;\r\n }\r\n\r\n body {\r\n     margin: 0;\r\n     padding: 0;\r\n\r\n     h1 {\r\n         font-size: 2rem;\r\n         font-weight: 600;\r\n         color: var(--white);\r\n     }\r\n\r\n     h3 {\r\n         font-size: 1.1rem;\r\n         font-weight: 600;\r\n     }\r\n\r\n     p {\r\n         font-size: 1rem;\r\n         color: var(--white);\r\n     }\r\n }\r\n\r\n`;","import React from 'react';\n// Routing\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// Components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport HomeGame from './components/HomeGame';\nimport Game from './components/Game';\nimport NotFound from './components/NotFound';\n\n//styles\nimport { GlobalStyle } from './GlobalStyle';\n\nconst App = () => (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path='/' element={<HomeGame />} />\n        <Route path='/:gameId' element={<Game />} /> \n        <Route path='/*' element={<NotFound />} />\n      </Routes>\n      <GlobalStyle />\n    </Router>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}